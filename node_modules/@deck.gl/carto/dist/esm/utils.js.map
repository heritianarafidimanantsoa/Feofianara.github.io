{"version":3,"sources":["../../src/utils.ts"],"names":["log","assert","condition","message","createBinaryProxy","data","index","properties","numericProps","Proxy","get","target","property","receiver","value","has","getWorkerUrl","id","version","scaleIdentity","unknown","scale","x","invert","domain","range","d","u","copy"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,eAAlB;AAGA,OAAO,SAASC,MAAT,CAAgBC,SAAhB,EAAoCC,OAApC,EAAyE;AAC9EH,EAAAA,GAAG,CAACC,MAAJ,CAAWC,SAAX,EAAsBC,OAAtB;AACD;AAID,OAAO,SAASC,iBAAT,CACLC,IADK,EAELC,KAFK,EAGL;AACA,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA6BH,IAAnC;AACA,SAAO,IAAII,KAAJ,CAAUF,UAAU,CAACD,KAAD,CAAV,IAAqB,EAA/B,EAAmC;AACxCI,IAAAA,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAC9B,UAAID,QAAQ,IAAIJ,YAAhB,EAA8B;AAC5B,eAAOA,YAAY,CAACI,QAAD,CAAZ,CAAiCE,KAAjC,CAAuCR,KAAvC,CAAP;AACD;;AACD,aAAOK,MAAM,CAACC,QAAD,CAAb;AACD,KANuC;;AAQxCG,IAAAA,GAAG,CAACJ,MAAD,EAASC,QAAT,EAAmB;AACpB,aAAOA,QAAQ,IAAIJ,YAAZ,IAA4BI,QAAQ,IAAID,MAA/C;AACD;;AAVuC,GAAnC,CAAP;AAYD;AAED,OAAO,SAASK,YAAT,CAAsBC,EAAtB,EAAkCC,OAAlC,EAAmD;AAGxD,oDAA2CA,OAA3C,mBAA2DD,EAA3D;AACD;AAED,OAAO,SAASE,aAAT,GAAyB;AAC9B,MAAIC,OAAJ;;AAEA,WAASC,KAAT,CAAeC,CAAf,EAAkB;AAChB,WAAOA,CAAC,KAAK,IAAN,GAAaF,OAAb,GAAuBE,CAA9B;AACD;;AAEDD,EAAAA,KAAK,CAACE,MAAN,GAAeF,KAAf;;AAEAA,EAAAA,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACI,KAAN,GAAcC,CAAC,IAAIA,CAAlC;;AAEAL,EAAAA,KAAK,CAACD,OAAN,GAAgBO,CAAC,IAAI;AACnB,QAAIA,CAAJ,EAAO;AACLP,MAAAA,OAAO,GAAGO,CAAV;AACD;;AAED,WAAOP,OAAP;AACD,GAND;;AAQAC,EAAAA,KAAK,CAACO,IAAN,GAAa,MAAMT,aAAa,GAAGC,OAAhB,CAAwBA,OAAxB,CAAnB;;AAEA,SAAOC,KAAP;AACD","sourcesContent":["import {log} from '@deck.gl/core';\nimport type {Properties, NumericProps} from './layers/schema/spatialjson-utils';\n\nexport function assert(condition: unknown, message?: string): asserts condition {\n  log.assert(condition, message);\n}\n\n// Returns a Proxy object that allows accessing binary data\n// as if it were JSON properties\nexport function createBinaryProxy(\n  data: {numericProps: NumericProps; properties: Properties[]},\n  index: number\n) {\n  const {properties, numericProps} = data;\n  return new Proxy(properties[index] || {}, {\n    get(target, property, receiver) {\n      if (property in numericProps) {\n        return numericProps[property as string].value[index];\n      }\n      return target[property as string];\n    },\n\n    has(target, property) {\n      return property in numericProps || property in target;\n    }\n  });\n}\n\nexport function getWorkerUrl(id: string, version: string) {\n  // For local testing `yarn build-workers` and then host `modules/carto/dist/`\n  // return `http://localhost:8081/dist/${id}-worker.js`;\n  return `https://unpkg.com/@deck.gl/carto@${version}/dist/${id}-worker.js`;\n}\n\nexport function scaleIdentity() {\n  let unknown;\n\n  function scale(x) {\n    return x === null ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = d => d;\n\n  scale.unknown = u => {\n    if (u) {\n      unknown = u;\n    }\n\n    return unknown;\n  };\n\n  scale.copy = () => scaleIdentity().unknown(unknown);\n\n  return scale;\n}\n"],"file":"utils.js"}