{"version":3,"sources":["../../../src/api/maps-v3-client.ts"],"names":["MAX_GET_LENGTH","DEFAULT_CLIENT","V3_MINOR_VERSION","request","method","url","customHeaders","headers","accessToken","body","errorContext","Accept","Authorization","fetch","CartoAPIError","requestJson","response","json","error","ok","requestData","format","FORMATS","NDJSON","data","rows","getParameters","type","source","geoColumn","columns","clientId","aggregationExp","aggregationResLevel","queryParameters","filters","parameters","client","v","sourceName","MAP_TYPES","QUERY","geo_column","join","isSpatialIndexGeoColumn","spatialIndex","split","mapInstantiation","connection","credentials","baseUrl","mapsUrl","encodedParameters","Object","entries","map","key","value","JSON","stringify","requestType","REQUEST_TYPES","INSTANTIATION","length","getUrlFromMetadata","metadata","m","checkFetchLayerDataParameters","apiVersion","API_VERSIONS","V3","apiBaseUrl","COLUMNS_SUPPORT","includes","GEO_COLUMN_SUPPORT","TABLE","fetchLayerData","formatTiles","_fetchDataUrl","mapFormat","DATA","result","schema","defaultCredentials","localCreds","prioritizedFormats","GEOJSON","TILEJSON","f","log","assert","values","TILE_FORMATS","_fetchMapDataset","dataset","connectionName","cache","parseInt","URL","searchParams","get","_fetchTilestats","attribute","statsUrl","TILE_STATS","q","stats","attributes","tilestats","layers","index","findIndex","d","fillInMapDatasets","datasets","token","promises","Promise","all","fillInTileStats","keplerMapConfig","config","visState","layer","keys","visualChannels","channel","name","find","id","dataId","TILESET","push","filteredAttributes","a","fetchMap","cartoMapId","autoRefresh","onNewData","PUBLIC_MAP","mapId","intervalId","setInterval","changed","some","stopAutoRefresh","clearInterval","geojsonLayers","filter","geojsonDatasetIds","forEach","geojson","out","textLayers","pointType","props","window","FontFace","document","fonts","check","font","load","then","add"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Carto 3\n */\nimport {\n  getDefaultCredentials,\n  buildMapsUrlFromBase,\n  buildStatsUrlFromBase,\n  CloudNativeCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  COLUMNS_SUPPORT,\n  encodeParameter,\n  Format,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapInstantiation,\n  MapType,\n  MAP_TYPES,\n  QueryParameters,\n  REQUEST_TYPES,\n  SchemaField,\n  TileFormat,\n  TILE_FORMATS,\n  Filters\n} from './maps-api-common';\n\nimport {APIErrorContext, CartoAPIError} from './carto-api-error';\n\nimport {parseMap} from './parseMap';\nimport {log} from '@deck.gl/core';\nimport {assert} from '../utils';\n\nconst MAX_GET_LENGTH = 8192;\nconst DEFAULT_CLIENT = 'deck-gl-carto';\nconst V3_MINOR_VERSION = '3.2';\n\nexport type Headers = Record<string, string>;\ninterface RequestParams {\n  method?: string;\n  url: string;\n  headers?: Headers;\n  accessToken?: string;\n  body?: any;\n  errorContext: APIErrorContext;\n}\n\n/**\n * Request against Maps API\n */\nasync function request({\n  method,\n  url,\n  headers: customHeaders,\n  accessToken,\n  body,\n  errorContext\n}: RequestParams): Promise<Response> {\n  const headers: Headers = {\n    ...customHeaders,\n    Accept: 'application/json'\n  };\n\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  if (method === 'POST') {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  try {\n    /* global fetch */\n    return await fetch(url, {\n      method,\n      headers,\n      body\n    });\n  } catch (error) {\n    throw new CartoAPIError(error as Error, errorContext);\n  }\n}\n\nasync function requestJson<T = unknown>({\n  method,\n  url,\n  headers,\n  accessToken,\n  body,\n  errorContext\n}: RequestParams): Promise<T> {\n  const response = await request({method, url, headers, accessToken, body, errorContext});\n  let json;\n  try {\n    json = await response.json();\n  } catch (error) {\n    json = {error: ''};\n  }\n\n  if (!response.ok) {\n    throw new CartoAPIError(json.error, errorContext, response);\n  }\n  return json as T;\n}\n\nasync function requestData({\n  method,\n  url,\n  accessToken,\n  format,\n  body,\n  errorContext\n}: RequestParams & {\n  format: Format;\n}): Promise<Response | unknown> {\n  if (format === FORMATS.NDJSON) {\n    return request({method, url, accessToken, body, errorContext});\n  }\n\n  const data = await requestJson<any>({method, url, accessToken, body, errorContext});\n  return data.rows ? data.rows : data;\n}\n\ntype FetchLayerDataParams = {\n  type: MapType;\n  source: string;\n  connection: string;\n  credentials: CloudNativeCredentials;\n  geoColumn?: string;\n  columns?: string[];\n  clientId?: string;\n  format?: Format;\n  formatTiles?: TileFormat;\n  headers?: Headers;\n  aggregationExp?: string;\n  aggregationResLevel?: number;\n  queryParameters?: QueryParameters;\n  filters?: Filters;\n};\n\ntype MapsAPIParameters = {\n  client: string;\n  v: string;\n  q?: string;\n  name?: string;\n  queryParameters?: QueryParameters;\n  geo_column?: string;\n  columns?: string;\n  aggregationExp?: string;\n  aggregationResLevel?: number;\n  filters?: Filters;\n};\n\n/**\n * Build a URL with all required parameters\n */\nfunction getParameters({\n  type,\n  source,\n  geoColumn,\n  columns,\n  clientId,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters,\n  filters\n}: Omit<FetchLayerDataParams, 'connection' | 'credentials'>): MapsAPIParameters {\n  const parameters: MapsAPIParameters = {\n    client: clientId || DEFAULT_CLIENT,\n    v: V3_MINOR_VERSION\n  };\n\n  const sourceName = type === MAP_TYPES.QUERY ? 'q' : 'name';\n  parameters[sourceName] = source;\n\n  if (queryParameters) {\n    parameters.queryParameters = queryParameters;\n  }\n\n  if (geoColumn) {\n    parameters.geo_column = geoColumn;\n  }\n  if (columns) {\n    parameters.columns = columns.join(',');\n  }\n  if (aggregationExp) {\n    parameters.aggregationExp = aggregationExp;\n  } else if (isSpatialIndexGeoColumn(geoColumn)) {\n    // Default aggregationExp required for spatial index layers\n    parameters.aggregationExp = '1 AS value';\n  }\n  if (aggregationResLevel) {\n    parameters.aggregationResLevel = aggregationResLevel;\n  }\n  if (filters) {\n    parameters.filters = filters;\n  }\n\n  return parameters;\n}\n\nfunction isSpatialIndexGeoColumn(geoColumn: string | undefined) {\n  const spatialIndex = geoColumn?.split(':')[0];\n  return spatialIndex === 'h3' || spatialIndex === 'quadbin';\n}\n\nexport async function mapInstantiation({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  clientId,\n  headers,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters,\n  filters\n}: FetchLayerDataParams): Promise<MapInstantiation> {\n  const baseUrl = `${credentials.mapsUrl}/${connection}/${type}`;\n  const parameters = getParameters({\n    type,\n    source,\n    geoColumn,\n    columns,\n    clientId,\n    aggregationResLevel,\n    aggregationExp,\n    queryParameters,\n    filters\n  });\n  const encodedParameters = Object.entries(parameters).map(([key, value]) => {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    return encodeParameter(key, value);\n  });\n  const url = `${baseUrl}?${encodedParameters.join('&')}`;\n  const {accessToken} = credentials;\n\n  const errorContext = {requestType: REQUEST_TYPES.INSTANTIATION, connection, type, source};\n  if (url.length > MAX_GET_LENGTH && type === MAP_TYPES.QUERY) {\n    return await requestJson({\n      method: 'POST',\n      url: baseUrl,\n      headers,\n      accessToken,\n      body: JSON.stringify(parameters),\n      errorContext\n    });\n  }\n\n  return await requestJson({url, headers, accessToken, errorContext});\n}\n\nfunction getUrlFromMetadata(metadata: MapInstantiation, format: Format): string | null {\n  const m = metadata[format];\n\n  if (m && !m.error && m.url) {\n    return m.url[0];\n  }\n\n  return null;\n}\n\nfunction checkFetchLayerDataParameters({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  aggregationExp,\n  aggregationResLevel,\n  filters\n}: FetchLayerDataParams) {\n  assert(connection, 'Must define connection');\n  assert(type, 'Must define a type');\n  assert(source, 'Must define a source');\n\n  assert(credentials.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  assert(credentials.apiBaseUrl, 'Must define apiBaseUrl');\n  assert(credentials.accessToken, 'Must define an accessToken');\n\n  if (columns) {\n    assert(\n      COLUMNS_SUPPORT.includes(type),\n      `The columns parameter is not supported by type ${type}`\n    );\n  }\n  if (geoColumn) {\n    assert(\n      GEO_COLUMN_SUPPORT.includes(type),\n      `The geoColumn parameter is not supported by type ${type}`\n    );\n  } else {\n    assert(!aggregationExp, 'Have aggregationExp, but geoColumn parameter is missing');\n    assert(!aggregationResLevel, 'Have aggregationResLevel, but geoColumn parameter is missing');\n  }\n  if (filters) {\n    assert(\n      type === MAP_TYPES.TABLE || type === MAP_TYPES.QUERY,\n      'The filters parameter is only supported by type table and query'\n    );\n  }\n}\n\nexport interface FetchLayerDataResult {\n  data: any;\n  format?: Format;\n  schema: SchemaField[];\n}\nexport async function fetchLayerData({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  format,\n  formatTiles,\n  clientId,\n  headers,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters,\n  filters\n}: FetchLayerDataParams): Promise<FetchLayerDataResult> {\n  // Internally we split data fetching into two parts to allow us to\n  // conditionally fetch the actual data, depending on the metadata state\n  const {url, accessToken, mapFormat, metadata} = await _fetchDataUrl({\n    type,\n    source,\n    connection,\n    credentials,\n    geoColumn,\n    columns,\n    format,\n    formatTiles,\n    clientId,\n    headers,\n    aggregationExp,\n    aggregationResLevel,\n    queryParameters,\n    filters\n  });\n\n  const errorContext = {requestType: REQUEST_TYPES.DATA, connection, type, source};\n  const data = await requestData({url, format: mapFormat, accessToken, errorContext});\n  const result: FetchLayerDataResult = {data, format: mapFormat, schema: metadata.schema};\n  return result;\n}\n\nasync function _fetchDataUrl({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  format,\n  formatTiles,\n  clientId,\n  headers,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters,\n  filters\n}: FetchLayerDataParams) {\n  const defaultCredentials = getDefaultCredentials();\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(defaultCredentials.apiVersion === API_VERSIONS.V3 && defaultCredentials),\n    ...credentials\n  };\n  checkFetchLayerDataParameters({\n    type,\n    source,\n    connection,\n    credentials: localCreds,\n    geoColumn,\n    columns,\n    aggregationExp,\n    aggregationResLevel,\n    filters\n  });\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  const metadata = await mapInstantiation({\n    type,\n    source,\n    connection,\n    credentials: localCreds,\n    geoColumn,\n    columns,\n    clientId,\n    headers,\n    aggregationExp,\n    aggregationResLevel,\n    queryParameters,\n    filters\n  });\n  let url: string | null = null;\n  let mapFormat: Format | undefined;\n\n  if (format) {\n    mapFormat = format;\n    url = getUrlFromMetadata(metadata, format);\n    assert(url, `Format ${format} not available`);\n  } else {\n    // guess map format\n    const prioritizedFormats = [FORMATS.GEOJSON, FORMATS.JSON, FORMATS.NDJSON, FORMATS.TILEJSON];\n    for (const f of prioritizedFormats) {\n      url = getUrlFromMetadata(metadata, f);\n      if (url) {\n        mapFormat = f;\n        break;\n      }\n    }\n    assert(url && mapFormat, 'Unsupported data formats received from backend.');\n  }\n\n  if (format === FORMATS.TILEJSON && formatTiles) {\n    log.assert(\n      Object.values(TILE_FORMATS).includes(formatTiles),\n      `Invalid value for formatTiles: ${formatTiles}. Use value from TILE_FORMATS`\n    );\n    url += `&${encodeParameter('formatTiles', formatTiles)}`;\n  }\n\n  const {accessToken} = localCreds;\n  return {url, accessToken, mapFormat, metadata};\n}\n\n/* global clearInterval, setInterval, URL */\nasync function _fetchMapDataset(\n  dataset,\n  accessToken: string,\n  credentials: CloudNativeCredentials,\n  clientId?: string,\n  headers?: Headers\n) {\n  const {\n    aggregationExp,\n    aggregationResLevel,\n    connectionName: connection,\n    columns,\n    format,\n    geoColumn,\n    source,\n    type,\n    queryParameters\n  } = dataset;\n  // First fetch metadata\n  const {url, mapFormat} = await _fetchDataUrl({\n    aggregationExp,\n    aggregationResLevel,\n    clientId,\n    credentials: {...credentials, accessToken},\n    connection,\n    columns,\n    format,\n    geoColumn,\n    headers,\n    source,\n    type,\n    queryParameters\n  });\n\n  // Extract the last time the data changed\n  const cache = parseInt(new URL(url).searchParams.get('cache') || '', 10);\n  if (cache && dataset.cache === cache) {\n    return false;\n  }\n  dataset.cache = cache;\n\n  // Only fetch if the data has changed\n  const errorContext = {requestType: REQUEST_TYPES.DATA, connection, type, source};\n  dataset.data = await requestData({url, format: mapFormat, accessToken, errorContext});\n\n  return true;\n}\n\nasync function _fetchTilestats(\n  attribute,\n  dataset,\n  accessToken: string,\n  credentials: CloudNativeCredentials\n) {\n  const {connectionName: connection, source, type} = dataset;\n\n  const statsUrl = buildStatsUrlFromBase(credentials.apiBaseUrl);\n  let baseUrl = `${statsUrl}/${connection}/`;\n  if (type === MAP_TYPES.QUERY) {\n    baseUrl += attribute;\n  } else {\n    // MAP_TYPE.TABLE\n    baseUrl += `${source}/${attribute}`;\n  }\n\n  const errorContext = {requestType: REQUEST_TYPES.TILE_STATS, connection, type, source};\n  let url = baseUrl;\n  if (type === MAP_TYPES.QUERY) {\n    url += `?${encodeParameter('q', source)}`;\n  }\n  let stats;\n  if (url.length > MAX_GET_LENGTH && type === MAP_TYPES.QUERY) {\n    stats = await requestJson({\n      method: 'POST',\n      url: baseUrl,\n      accessToken,\n      body: JSON.stringify({q: source}),\n      errorContext\n    });\n  } else {\n    stats = await requestJson({url, accessToken, errorContext});\n  }\n\n  // Replace tilestats for attribute with value from API\n  const {attributes} = dataset.data.tilestats.layers[0];\n  const index = attributes.findIndex(d => d.attribute === attribute);\n  attributes[index] = stats;\n  return true;\n}\n\nasync function fillInMapDatasets(\n  {datasets, token},\n  clientId: string,\n  credentials: CloudNativeCredentials,\n  headers?: Headers\n) {\n  const promises = datasets.map(dataset =>\n    _fetchMapDataset(dataset, token, credentials, clientId, headers)\n  );\n  return await Promise.all(promises);\n}\n\nasync function fillInTileStats(\n  {datasets, keplerMapConfig, token},\n  credentials: CloudNativeCredentials\n) {\n  const attributes: {attribute?: string; dataset?: any}[] = [];\n  const {layers} = keplerMapConfig.config.visState;\n  for (const layer of layers) {\n    for (const channel of Object.keys(layer.visualChannels)) {\n      const attribute = layer.visualChannels[channel]?.name;\n      if (attribute) {\n        const dataset = datasets.find(d => d.id === layer.config.dataId);\n        if (dataset.data.tilestats && dataset.type !== MAP_TYPES.TILESET) {\n          // Only fetch stats for QUERY & TABLE map types\n          attributes.push({attribute, dataset});\n        }\n      }\n    }\n  }\n  // Remove duplicates to avoid repeated requests\n  const filteredAttributes: {attribute?: string; dataset?: any}[] = [];\n  for (const a of attributes) {\n    if (\n      !filteredAttributes.find(\n        ({attribute, dataset}) => attribute === a.attribute && dataset === a.dataset\n      )\n    ) {\n      filteredAttributes.push(a);\n    }\n  }\n\n  const promises = filteredAttributes.map(({attribute, dataset}) =>\n    _fetchTilestats(attribute, dataset, token, credentials)\n  );\n  return await Promise.all(promises);\n}\n\n/* eslint-disable max-statements */\nexport async function fetchMap({\n  cartoMapId,\n  clientId,\n  credentials,\n  headers,\n  autoRefresh,\n  onNewData\n}: {\n  cartoMapId: string;\n  clientId: string;\n  credentials?: CloudNativeCredentials;\n  headers?: Headers;\n  autoRefresh?: number;\n  onNewData?: (map: any) => void;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const localCreds = {\n    ...(defaultCredentials.apiVersion === API_VERSIONS.V3 && defaultCredentials),\n    ...credentials\n  } as CloudNativeCredentials;\n  const {accessToken} = localCreds;\n\n  assert(cartoMapId, 'Must define CARTO map id: fetchMap({cartoMapId: \"XXXX-XXXX-XXXX\"})');\n\n  assert(localCreds.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  assert(localCreds.apiBaseUrl, 'Must define apiBaseUrl');\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  if (autoRefresh || onNewData) {\n    assert(onNewData, 'Must define `onNewData` when using autoRefresh');\n    assert(typeof onNewData === 'function', '`onNewData` must be a function');\n    assert(\n      typeof autoRefresh === 'number' && autoRefresh > 0,\n      '`autoRefresh` must be a positive number'\n    );\n  }\n\n  const url = `${localCreds.mapsUrl}/public/${cartoMapId}`;\n  const errorContext = {requestType: REQUEST_TYPES.PUBLIC_MAP, mapId: cartoMapId};\n  const map = await requestJson<any>({url, headers, accessToken, errorContext});\n\n  // Periodically check if the data has changed. Note that this\n  // will not update when a map is published.\n  let stopAutoRefresh: (() => void) | undefined;\n  if (autoRefresh) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const intervalId = setInterval(async () => {\n      const changed = await fillInMapDatasets(map, clientId, localCreds, headers);\n      if (onNewData && changed.some(v => v === true)) {\n        onNewData(parseMap(map));\n      }\n    }, autoRefresh * 1000);\n    stopAutoRefresh = () => {\n      clearInterval(intervalId);\n    };\n  }\n\n  const geojsonLayers = map.keplerMapConfig.config.visState.layers.filter(\n    ({type}) => type === 'geojson' || type === 'point'\n  );\n  const geojsonDatasetIds = geojsonLayers.map(({config}) => config.dataId);\n  map.datasets.forEach(dataset => {\n    if (geojsonDatasetIds.includes(dataset.id)) {\n      const {config} = geojsonLayers.find(({config}) => config.dataId === dataset.id);\n      dataset.format = 'geojson';\n      // Support for very old maps. geoColumn was not stored in the past\n      if (!dataset.geoColumn && config.columns.geojson) {\n        dataset.geoColumn = config.columns.geojson;\n      }\n    }\n  });\n\n  // Mutates map.datasets so that dataset.data contains data\n  await fillInMapDatasets(map, clientId, localCreds, headers);\n\n  // Mutates attributes in visualChannels to contain tile stats\n  await fillInTileStats(map, localCreds);\n  const out = {...parseMap(map), ...{stopAutoRefresh}};\n\n  const textLayers = out.layers.filter(layer => {\n    const pointType = layer.props.pointType || '';\n    return pointType.includes('text');\n  });\n\n  /* global FontFace, window, document */\n  if (textLayers.length && window.FontFace && !document.fonts.check('12px Inter')) {\n    // Fetch font needed for labels\n    const font = new FontFace(\n      'Inter',\n      'url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7W0Q5nw.woff2)'\n    );\n    await font.load().then(f => document.fonts.add(f));\n  }\n\n  return out;\n}\n"],"file":"maps-v3-client.js"}